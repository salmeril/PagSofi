const messagesContainer = document.getElementById('messages');
let messageIndex = 0;

// Muestra la burbuja de tipeo
function showTypingBubble() {
    const typingBubble = document.createElement('div');
    typingBubble.className = 'typing-bubble';
    
    const typingIndicator = document.createElement('div');
    typingIndicator.className = 'typing-indicator';

    for (let i = 0; i < 3; i++) {
        const dot = document.createElement('div');
        dot.className = 'dot';
        typingIndicator.appendChild(dot);
    }
    
    typingBubble.appendChild(typingIndicator);
    messagesContainer.appendChild(typingBubble);

    return typingBubble; // Retorna la burbuja para poder eliminarla despu√©s
}

// A√±ade un mensaje al contenedor
function addMessage(content, isAudio = false, audioSrc = null, audioId = null) {
    const message = document.createElement('div');
    message.className = 'message';
    if (isAudio) {
        const audioContainer = createAudioPlayer(audioSrc, audioId);
        message.appendChild(audioContainer);
    } else if (typeof content === 'object' && content.isSelector) {
        const selectorContainer = createPercentageSelectors(content.options, content.title);
        message.appendChild(selectorContainer);
    } else {
        message.innerHTML = content;
    }
    messagesContainer.appendChild(message);
}

// Limpia el chat
function clearChat() {
    messagesContainer.innerHTML = ''; // Elimina todos los mensajes anteriores
}

// Muestra los mensajes con un retardo
function showMessages(messages, nextFunction, delayAfterLastMessage = 57000) {
    clearChat(); // Borra los mensajes anteriores antes de mostrar los nuevos
    messageIndex = 0;

    function showNextMessage() {
        if (messageIndex < messages.length) {
            const typingBubble = showTypingBubble(); // Muestra la burbuja con los 3 puntos
            setTimeout(() => {
                messagesContainer.removeChild(typingBubble); // Elimina la burbuja de los 3 puntos
                const currentMessage = messages[messageIndex];
                if (typeof currentMessage === 'object' && currentMessage.audio) {
                    addMessage("", true, currentMessage.audio, currentMessage.id);
                } else {
                    addMessage(currentMessage);
                }
                messageIndex++;

                if (messageIndex < messages.length) {
                    setTimeout(showNextMessage, 2000);
                } else if (nextFunction) {
                    setTimeout(nextFunction, delayAfterLastMessage);
                }
            }, 2000); // Tiempo que se muestra la burbuja con los 3 puntos
        }
    }

    showNextMessage();
}

// Crea los selectores con las barras de porcentaje
function createPercentageSelectors(options, title) {
    const selectorContainer = document.createElement('div');
    selectorContainer.className = 'selector-container';

    // Agrega el t√≠tulo si se proporciona
    if (title) {
        const titleElement = document.createElement('div');
        titleElement.className = 'selector-title';
        titleElement.textContent = title;
        selectorContainer.appendChild(titleElement);
    }

    options.forEach((option) => {
        const optionContainer = document.createElement('div');
        optionContainer.className = 'option-container';

        const radioButton = document.createElement('input');
        radioButton.type = 'radio'; // Cambiado a 'radio' para permitir solo una selecci√≥n
        radioButton.name = 'percentageSelector'; // Asegura que solo un radio button pueda estar activo a la vez
        radioButton.id = option.label + 'Check';
        radioButton.addEventListener('change', () => updatePercentageBar(option.label, option.percentage));

        const label = document.createElement('label');
        label.htmlFor = radioButton.id;
        label.textContent = option.label;

        const progressBar = document.createElement('div');
        progressBar.className = 'progress-bar-container';
        
        const percentageBar = document.createElement('div');
        percentageBar.className = 'percentage-bar ' + option.label.toLowerCase();
        percentageBar.id = option.label + 'Bar';

        const percentageValue = document.createElement('div');
        percentageValue.className = 'percentage-value';
        percentageValue.id = option.label + 'Percentage';

        progressBar.appendChild(percentageBar);
        progressBar.appendChild(percentageValue);

        optionContainer.appendChild(radioButton);
        optionContainer.appendChild(label);
        optionContainer.appendChild(progressBar);
        selectorContainer.appendChild(optionContainer);
    });

    return selectorContainer;
}

// Actualiza las barras de porcentaje
function updatePercentageBar(label, percentage) {
    document.querySelectorAll('.percentage-bar').forEach(bar => bar.style.width = '0%');
    document.querySelectorAll('.percentage-value').forEach(value => value.textContent = '0%');

    const percentageBar = document.getElementById(label + 'Bar');
    const percentageValue = document.getElementById(label + 'Percentage');

    if (percentageBar) {
        percentageBar.style.width = percentage + '%';
        percentageValue.textContent = percentage + '%';
    }
}

// Definir los flujos de mensajes
const firstMessages = [
    "¬°Hola!, ¬øc√≥mo andas? Soy Character IA y en el siguiente audio te cuento un poco sobre m√≠ üòä",
    { audio: '/infografia-1/src/audio/CaracterAiTodoJunto.mp3', id: 1 },
    
    { 
      title: "Dispositivos en los que m√°s se utiliza", // Agrega el t√≠tulo aqu√≠
      isSelector: true, 
      options: [
          { label: 'M√≥vil', percentage: 72.66 },
          { label: 'Otros', percentage: 27.44 }
      ]
    }
];

const secondMessages = [
    "¬øSab√≠as que la IA puede ayudarte en tus tareas diarias?",
    "En el siguiente audio te explico c√≥mo.",
    { audio: '/infografia-1/src/audio/CaracterAiTodoJunto2.mp3', id: 2 }
];

const thirdMessages = [
    "¬°Eso es todo por ahora!",
    "Recuerda que puedes interactuar conmigo para aprender m√°s.",
    "¬°Hasta la pr√≥xima!"
];

// Iniciar el primer flujo de mensajes y encadenar los siguientes
showMessages(firstMessages, () => showMessages(secondMessages, () => showMessages(thirdMessages, null, 0), 10000), 10000);





showMessages(firstMessages, () => showMessages(secondMessages, () => showMessages(thirdMessages, null, 0), 15000), 15000);






// Definir los flujos de mensajes
const firstMessages = [
    { audio: '/infografia-1/src/audio/pros1chayanne.mp3', id: 1 },
    "Sigue escuchando! ",
    "Te dir√© todo lo bueno de usar character ai",
    { audio: '/infografia-1/src/audio/pros2chayanne.mp3', id: 2 },
    { audio: '/infografia-1/src/audio/pros3chayanne.mp3', id: 3 }, // Este es el √∫ltimo audio
];

const secondMessages = [
    "Aunque no todo es bueno, tambi√©n hay partes poco √©ticas en este chat",
    { audio: '/infografia-1/src/audio/CaracterAi3.mp3', id: 4 }, // Este es el √∫ltimo audio
];

const thirdMessages = [
    ["<strong>üåç La huella de carbono:</strong> generada por el entrenamiento de AI es igual a:", "üöó Conducir millones de kil√≥metros en un auto", "üè† Alimentar cientos de hogares durante un a√±o."],
    "Bueno, mi gente linda, me despido por ahora! ¬°Les mando un abrazo ",
    "¬°Bueno, mi gente linda, me despido por ahora! ¬°Les mando un abrazo! !",
];

const fourthMessages = [
    "Espero tengas ganas de continuar",
    { showContinueButton: true } // Bot√≥n de continuar
];

// Iniciar el primer flujo de mensajes y encadenar los siguientes
showMessages(firstMessages, () => showMessages(secondMessages, () => showMessages(thirdMessages, () => showMessages(fourthMessages), 5000), 5000), 5000);
